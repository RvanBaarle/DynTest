module start

imports
  lex

context-free start-symbols

  Start

context-free sorts

  Start Statement Expression Value Variable Condition

context-free syntax

  Variable.Variablee = <<ID>>
  Value.Int = <<INT>>

  Expression.Value = <<Value>>
  Expression.Variable = <<Variable>>
  Expression = <(<Expression>)> {bracket}

  Expression.Add = <<Expression> + <Expression>> {left}
  Expression.Sub = <<Expression> - <Expression>> {left}
  Expression.Mul = <<Expression> * <Expression>> {left}
  Expression.Div = <<Expression> / <Expression>> {left}
  Expression.Apply = <<Expression>(<{Expression ", "}*>)>
  Expression.Lambda = [[{ID ", "}*] -> [Expression]]

  Statement.Print = <print(<Expression>)>
  Statement.Assign = <<Variable> = <Expression>>
  Statement.Simple = <<Expression>>
  Statement.Jump = <goto <ID>>
  Statement.If = <
    if <Condition> then
      <s:Statement>
  > {layout(indent "if" s)}
  Statement.Label = <<ID>:>

  Condition.Zero = <<Expression> is zero>

  Start.Program = <<s:Statement*>> {layout(align-list s)}

syntax
  Value-CF.String = "\"" STRING-CF "\""

lexical syntax

  LAYOUT = [\ \n\v\f\r\t]
  LAYOUT = "//" ~[\r\n]* [\n\r]

context-free restrictions

  LAYOUT? -/- [\ \n\v\f\r\/]

template options

  ID = keyword {reject}
